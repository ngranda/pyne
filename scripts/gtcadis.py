#!/usr/bin/env python
import argparse
import ConfigParser
import os

import numpy as np
from pyne.mesh import Mesh, IMeshTag
from pyne.partisn import write_partisn_input, isotropic_vol_source
from pyne.dagmc import discretize_geom, load, cell_material_assignments
from pyne import nucname
from pyne.bins import pointwise_collapse
from pyne.cccc import Atflux



config_filename = 'config.ini'

config = \
    """
# Optional step to assess all materials in geometry for compatibility with
# SNILB criteria
[step0]

# Prepare PARTISN input file for adjoint photon transport
[step1]

# Calculate T matrix for each material
[step2]
# Path to hdf5 geometry file for neutron transport
geom_file:
# Single decay time of interest
decay_time:

# Calculate adjoint neutron source
[step3]
# Path to PARTISN adjoint photon flux file (atflux)
atflux:
# File generated by step 2 (tempT.npy) must be 
# in run directory

# Prepare PARTISN input for adjoint neutron transport
[step4]

# Generate Monte Carlo variance reduction parameters
# (biased source and weight windows)
[step5]


"""


def setup():
    with open(config_filename, 'w') as f:
        f.write(config)
    print('File "{}" has been written'.format(config_filename))
    print('Fill out the fields in these files then run ">> gtcadis.py step1"')


def _names_dict():
    names = ['h1', 'd', 'h3', 'he3', 'he4', 'li6', 'li7', 'be9', 'b10', 'b11',
             'c12', 'n14', 'n15', 'o16', 'f19', 'na23', 'mgnat', 'al27', 'si28', 'si29',
             'si30', 'p31', 'snat', 'cl35', 'cl37', 'knat', 'canat', 'ti46', 'ti47', 'ti48',
             'ti49', 'ti50', 'vnat', 'cr50', 'cr52', 'cr53', 'cr54', 'mn55', 'fe54', 'fe56',
             'fe57', 'fe58', 'co59', 'ni58', 'ni60', 'ni61', 'ni62', 'ni64', 'cu63', 'cu65',
             'ganat', 'zrnat', 'nb93', 'mo92', 'mo94', 'mo95', 'mo96', 'mo97', 'mo98',
             'mo100', 'snnat', 'ta181', 'w182', 'w183', 'w184', 'w186', 'au197', 'pb206',
             'pb207', 'pb208', 'bi209']

    names_formatted = ['h1', 'h2', 'h3', 'he3', 'he4', 'li6', 'li7', 'be9', 'b10', 'b11',
                       'c12', 'n14', 'n15', 'o16', 'f19', 'na23', 'mg', 'al27', 'si28', 'si29',
                       'si30', 'p31', 's', 'cl35', 'cl37', 'k', 'ca', 'ti46', 'ti47', 'ti48',
                       'ti49', 'ti50', 'v', 'cr50', 'cr52', 'cr53', 'cr54', 'mn55', 'fe54', 'fe56',
                       'fe57', 'fe58', 'co59', 'ni58', 'ni60', 'ni61', 'ni62', 'ni64', 'cu63', 'cu65',
                       'ga', 'zr', 'nb93', 'mo92', 'mo94', 'mo95', 'mo96', 'mo97', 'mo98',
                       'mo100', 'sn', 'ta181', 'w182', 'w183', 'w184', 'w186', 'au197', 'pb206',
                       'pb207', 'pb208', 'bi209']

    names_dict = {nucname.id(x): y for x, y in zip(names_formatted, names)}

    return names_dict


def _cards(source):
    cards = {"block1": {"isn": 16,
                        "maxscm": '3E8',
                        "maxlcm": '6E8',
                        },
             "block3": {"lib": "xsf21",  # name of cross section library
                        "lng": 175,
                        "maxord": 5,
                        "ihm": 227,
                        "iht": 10,
                        "ihs": 11,
                        "ifido": 1,
                        "ititl": 1,
                        "i2lp1": 0,
                        "savbxs": 0,
                        "kwikrd": 0
                        },
             "block5": {"source": source,
                        "ith": 1,
                        "isct": 5}
             }
    return cards



def step3():
    # Parse config file
    config = ConfigParser.ConfigParser()
    config.read(config_filename)
    geom = config.get('step2', 'geom_file')
    dt = [config.get('step2', 'decay_time').split(',')]
    at = config.get('step3', 'atflux')

    # Tag mesh with adjoint flux values from atflux file
    os.system('cp blank_mesh.h5m adj_p_mesh.h5m')
    m = Mesh(structured=True, mesh='adj_p_mesh.h5m')
    at = Atflux(at)
    at.to_mesh(m, "flux")

    m.flux = IMeshTag(217)
    adj_p = m.flux[:]
   
    # Load geometry and get material assignments 
    load(geom)
    cell_mats_raw = cell_material_assignments(geom)
    cell_mats = {c:int(n.split(":")[1].split("/")[0][1]) if c in [2, 3, 4] else 0 for c, n in cell_mats_raw.items()}

    # Load T matrix
    T = np.load('tempT.npy')

    # Create tag for adjoint neutron source
    m.adj_n_src = IMeshTag(217)
    
    dg = discretize_geom(m)
    for t in range(len(dt)): 
        temp = np.zeros(shape=(len(m), 217))
        for i in range(len(m)):
            for row in np.atleast_1d(dg[dg["idx"] == i]):
                cell = row[1]
                mat = cell_mats[cell] - 1
                for g in range(175):
                    for h in range(42):
                        temp[i, g + 42] += adj_p[i, h]*T[mat, t, g, h]
        m.adj_n_src[:] = temp
        m.mesh.save("adj_n_src{0}.h5m".format(dt[t]))

def main():

    gtcadis_help = ('This script automates the GT-CADIS process of \n'
                    'producing variance reduction parameters to optimize the\n'
                    'neutron transport step of the Rigorous 2-Step (R2S) method.\n')
    setup_help = ('Prints the file "config.ini" to be\n'
                  'filled in by the user.\n')
    step3_help = 'Creates the adjoint neutron source.'
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help=gtcadis_help, dest='command')

    setup_parser = subparsers.add_parser('setup', help=setup_help)
    step3_parser = subparsers.add_parser('step3', help=step3_help)

    args, other = parser.parse_known_args()
    if args.command == 'setup':
        setup()
    elif args.command == 'step3':
        step3()


if __name__ == '__main__':
    main()
